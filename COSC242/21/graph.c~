#include <stdlib.h>
#include <stdio.h>
#include "mylib.h"
#include "graph.h"
#include "queue.h"

typedef enum { UNVISITED, VISITED_SELF, VISITED_DESCENDANTS } state_t;

struct vertexrec {
    int predecessor;
    int distance;
    state_t state;
    int finish;
};

struct graphrec {
    int size;
    struct vertexrec *vertices;
    int **edges;
};


graph graph_new(int size){
    int i, j;
    graph g = emalloc(sizeof *g);
    g->size = size;
    g->vertices = emalloc(size * sizeof *(g->vertices));
    g->edges = emalloc(size * sizeof g->edges[0]);
    for (i = 0; i < size; i++){
        g->edges[i] = emalloc(size * sizeof g->edges[0][0]);
        for (j = 0; j < size; j++){
            g->edges[i][j] = 0;
        }
    }
    return g;
}

graph graph_add_edges(graph g, int a, int b){
    g->edges[a][b] = 1;
    return g;
}

graph graph_add_2edges(graph g, int a, int b){
    g->edges[a][b] = 1;
    g->edges[b][a] = 1;
    return g;
}

void graph_free(graph g){
    int i;
    for (i = 0; i < g->size; i++){
        free(g->edges[i]);
    }
    free(g->edges);
    free(g->vertices);
    free(g);
}

void graph_print(graph g){
    int i, j;
    printf("adjacency list:\n");
    for (i = 0; i < g->size; i++){
        printf("%i  |  ", i);
        for (j = 0; j < g->size; j++){
            if(g->edges[i][j] == 1){
                printf("%i, ", j);
            }
        }
        printf("\n");
    }
}

void graph_bfs(graph g, int source){
    queue q = queue_new();
    int i, j, v;
    for (i = 0; i < g->size; i++){
        g->vertices[i].state = UNVISITED;
        g->vertices[i].distance = -1;
        g->vertices[i].predecessor = -1;
    }
    g->vertices[source].state = VISITED_SELF;
    g->vertices[source].distance = 0;
    enqueue(q, source);
    while (queue_size(q) > 0){
        int u = dequeue(q);/* changed u and v */
        for (v = 0; v < g->size; v++){
            for (j = 0; j < g->size; j++){
                if(g->edges[v][j] == 1){
                    
                    if (g->vertices[v].state == UNVISITED){
                        /*
                        set its state to process of being visited
                        set its distance to be 1 + the distance to u
                        set its predecessor to u
                        add v to queue
                        */
                    }
                }       
            }

        }

        
    }
    /*
      set uâ€™s state to visited_descendants
    */
}
