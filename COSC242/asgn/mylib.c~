#include <assert.h>
#include <ctype.h>
#include <stdio.h>

/**@author Ali Morris, Abigail Tubay, Chenyang Zhang
 * mylib.c to allocate memory space and 
 * read words from files
 */

/* reads out words in the dictionary 
   @param s - pointer to allocated space for the word
   @param limit - maximum size the new word can be
   @param stream - location to read from 
   @return if successful (if >0) or unsuccessful (-1)
*/
int getword(char *s, int limit, FILE *stream) {
    int c;
    char *w = s;
    assert(limit > 0 && s != NULL && stream != NULL);
    while (!isalnum(c = getc(stream)) && EOF != c)
        ;
    if (EOF == c) {
        return EOF;
    } else if (--limit > 0) {
        *w++ = tolower(c);
    }
    while (--limit > 0) {
        if (isalnum(c = getc(stream))) {
            *w++ = tolower(c);
        } else if (’\’’ == c) {
            limit++;
        } else {
            break;
        }
    }
    *w = ’\0’;
    return w - s;
}

/* Allocates memory space of a given size and returns it if successful
   @param s - size of space to be allocated
   @return pointer to the new space
*/
void *emalloc(size_t s) {
    
    void *p = malloc(s);
    if (p == NULL){
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    return p;
}

/* Allocates more space for an array, called if an array is at capacity and
   needs to be expanded
   @param p - pointer to the block to be reallocated
   @param s - size of the new space
   @return pointer to the new space
*/
void *erealloc(void *p, size_t s) {
    
    p = realloc(p, s);
    if (p == NULL){
        fprintf(stderr, "Memory reallocation failed\n");
        exit(EXIT_FAILURE);
    }
    return p;
}
